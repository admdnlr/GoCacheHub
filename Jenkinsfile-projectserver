pipeline {
    agent any

    environment {
        // Ortam değişkenlerini tanımla
        DOCKER_REGISTRY = 'registry.digitalocean.com/admdnlr'
        IMAGE_NAME = 'gocachehub'
        // İmaj versiyonu ve tag'ı daha sonra tanımlanacak
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
                // SCM'den kodu al, bu adım her zaman çalışır
            }
        }

        stage('Build') {
            steps {
                script {
                    // Git commit ID'sini al ve versiyon ile imaj tag'ını oluştur
                    def commitId = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    env.VERSION = "v0.${env.BUILD_NUMBER}-${commitId}"
                    env.IMAGE_TAG = "${DOCKER_REGISTRY}/${IMAGE_NAME}:${env.VERSION}"
                    // Docker imajını oluştur
                    sh "/usr/local/bin/docker build -t ${env.IMAGE_TAG} ."
                }
            }
        }

        stage('Push') {
            steps {
                script {
                    // Docker Registry'ye giriş yap ve imajı it
                    withCredentials([usernamePassword(credentialsId: 'registry-cred', passwordVariable: 'REGISTRY_PASS', usernameVariable: 'REGISTRY_USER')]) {
                        sh "echo '$REGISTRY_PASS' | /usr/local/bin/docker login ${DOCKER_REGISTRY} -u '$REGISTRY_USER' --password-stdin"
                        sh "/usr/local/bin/docker push ${env.IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Update K8s Deployment') {
            steps {
                script {
                    git branch: 'main', credentialsId: 'github-cred', url: 'https://github.com/admdnlr/GoCacheHub.git'
                    sh "sed -i 's|image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:.*|image: ${env.IMAGE_TAG}|' Deployment-Manifests/gocachehub-deployment.yaml"
                    git add "Deployment-Manifests/gocachehub-deployment.yaml"
                    git commit -m 'Update image version to ${env.VERSION}'
                    git push origin main
                }
            }
        }

        post {
            always {
                // Her durumda geçici dosyaları temizle ve işlem sonucunu bildir
                cleanWs()
                echo 'Geçici dosyalar temizlendi ve işlem tamamlandı.'
            }
            failure {
                // Yalnızca işlem başarısız olduğunda çalışır
                mail to: 'admin@example.com', subject: 'Pipeline Failure', body: 'Jenkins pipeline failed. Please check.'
            }
        }
    }
}